package com.board.controller;

import java.net.URLEncoder;
import java.util.*;

import org.springframework.data.domain.Page;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.board.dto.BoardDTO;
import com.board.dto.MemberDTO;
import com.board.entity.BoardEntity;
import com.board.entity.MemberEntity;
import com.board.entity.repository.BoardRepository;
import com.board.entity.repository.MemberRepository;
import com.board.service.BoardService;
import com.board.service.MemberService;
import com.board.util.PageUtil;

import jakarta.servlet.http.HttpSession;
import lombok.RequiredArgsConstructor;
import lombok.ToString;

@CrossOrigin(originPatterns = "http://localhost:3000")
@RestController
@RequiredArgsConstructor
public class RESTController {
	
	private final BoardRepository boardRepository;
	private final MemberRepository memberRepository;
	private final MemberService mservice;
	private final BoardService bservice;
	private final BCryptPasswordEncoder pwdEncoder;
	
	
	//전체게시물 목록 가져오기
	@GetMapping("/restapi/listAll")
	public List<BoardDTO> getList() throws Exception {
		List<BoardDTO> boardDTOs = new ArrayList<>();
		boardRepository.findAll().stream().forEach(list -> boardDTOs.add(new BoardDTO(list)));
		return boardDTOs;
		}
	
	//게시물 목록 보기
	@GetMapping("/restapi/list")
		public Page<BoardEntity> getList(@RequestParam("page") int pageNum,
				@RequestParam(name="keyword",defaultValue="",required=false) String keyword) throws Exception{
			//model.addAttribute("list",mapper.list());
			int postNum = 5; //한 화면에 보여지는 게시물 행의 갯수
			int pageListCount = 10; //화면 하단에 보여지는 페이지리스트 내의 페이지 갯수
			
			return bservice.list(pageNum, postNum, keyword);
		}

	//게시물 페이지 리스트 보기
	@GetMapping("/restapi/pageList")
	public String getPageList(@RequestParam("page") int pageNum,
			@RequestParam(name="keyword",defaultValue="",required=false) String keyword) throws Exception {
		int postNum = 10; //한 화면에 보여지는 게시물 행의 갯수
		int pageListCount = 10; //화면 하단에 보여지는 페이지리스트 내의 페이지 갯수
		PageUtil page = new PageUtil();
		Page<BoardEntity> list = getList(pageNum, keyword);
		return page.getPageList(pageNum, postNum, pageListCount, (int)list.getTotalElements(), keyword);
	}
	
	//로그인 처리
	@PostMapping("/restapi/loginCheck")
	public String postLogIn(MemberDTO loginData,HttpSession session,@RequestParam("autoLogin") String autologin) throws Exception{
		
		String authkey = "";
		
		//로그인 시 자동로그인으로 체크할 경우 신규 authkey 등록
		if(autologin.equals("NEW")){
			authkey = UUID.randomUUID().toString().replaceAll("-", "");
			loginData.setAuthkey(authkey);
			mservice.authkeyUpdate(loginData);
		}
		//authkey가 클라이언트에 쿠키로 존재할 경우 로그인 과정 없이 게시판 목록 페이지로 이동
		if(autologin.equals("PASS")) {
			if(memberRepository.findByAuthkey(loginData.getAuthkey()) != null) {
				return "{\"message\":\"good\"}";
			}else {
				return "{\"message\":\"bad\"}";
			}
		}
		
		//아이디 존재 여부 확인
		if(mservice.idCheck(loginData.getEmail()) == 0)
			return "{\"message\":\"ID_NOT_FOUND\"}";
		
		//아이디가 존재하면 읽어온 email로 로그인 정보 가져 오기
		MemberDTO member = mservice.memberInfo(loginData.getEmail());
		
		//패스워드 확인
		if(!pwdEncoder.matches(loginData.getPassword(),member.getPassword())) 
			return "{\"message\":\"PASSWORD_NOT_FOUND\"}";
		String str = "{\"message\":\"good\",\"authkey\":\"" + member.getAuthkey() + "\",\"username\":\""
				+ URLEncoder.encode(member.getUsername(),"UTF-8") + "\",\"role\":\"" + member.getRole() + "\" }";
		System.out.println("str="+ str);
		return str;

		
		}
	
	@GetMapping("/restapi/visit")
	public String getRandomVisit() {

		//숫자 + 영문대소문자 10자리 임시패스워드 생성
		StringBuffer tempPW = new StringBuffer();
		Random rnd = new Random();
		for (int i = 0; i < 10; i++) {
		    int rIndex = rnd.nextInt(3);
		    switch (rIndex) {
		    case 0:
		        // a-z : 아스키코드 97~122
		    	tempPW.append((char) ((int) (rnd.nextInt(26)) + 97));
		        break;
		    case 1:
		        // A-Z : 아스키코드 65~122
		    	tempPW.append((char) ((int) (rnd.nextInt(26)) + 65));
		        break;
		    case 2:
		        // 0-9
		    	tempPW.append((rnd.nextInt(10)));
		        break;
		    }
		}
		
		
		return "{\"rvalue\":\"" + tempPW.toString()+ "\"}";
	}
	
}
